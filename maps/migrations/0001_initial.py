# Generated by Django 4.0.6 on 2022-11-02 13:16

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
    ]

    operations = [
        migrations.CreateModel(
            name='Map',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='Title', max_length=64, unique=True)),
                ('description', models.TextField(default='Description')),
                ('map_image', models.FileField(blank=True, null=True, upload_to='map_images')),
                ('anchor_date', models.DateField(default='1945-09-01')),
                ('excel_upload', models.FileField(blank=True, null=True, upload_to='map_excel_files')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('altitude', models.FloatField(blank=True, null=True)),
                ('geometry', models.CharField(default='Point', max_length=16)),
                ('alternative_id', models.IntegerField(blank=True, null=True)),
                ('content_online', models.BooleanField(default=False)),
                ('dates', models.CharField(blank=True, max_length=256, null=True)),
                ('hours', models.CharField(blank=True, max_length=256, null=True)),
                ('day', models.CharField(blank=True, choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], max_length=12, null=True)),
                ('primary_city_name', models.CharField(blank=True, max_length=64, null=True)),
                ('alternative_city_names', models.CharField(blank=True, max_length=256, null=True, verbose_name='Alternative city names')),
                ('primary_region_name', models.CharField(blank=True, max_length=64, null=True)),
                ('alternative_region_names', models.CharField(blank=True, max_length=256, null=True, verbose_name='Alternative region names')),
                ('primary_country_name', models.CharField(blank=True, max_length=64, null=True)),
                ('alternative_country_names', models.CharField(blank=True, max_length=256, null=True, verbose_name='Alternative country names')),
                ('address', models.CharField(blank=True, max_length=256, null=True)),
                ('postcode', models.CharField(blank=True, max_length=256, null=True)),
                ('district', models.CharField(blank=True, max_length=256, null=True)),
                ('neighborhood', models.CharField(blank=True, max_length=256, null=True)),
                ('number_of_days_after_anchor_date_that_event_began', models.IntegerField(blank=True, default=0, null=True)),
                ('number_of_days_after_anchor_date_that_event_ended', models.IntegerField(blank=True, default=0, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('title', models.CharField(blank=True, default='Title', max_length=64, null=True)),
                ('description', models.TextField(blank=True, default='Description', null=True)),
                ('link', models.CharField(blank=True, max_length=512, null=True)),
                ('marker_color', models.CharField(choices=[('red', 'red'), ('green', 'green'), ('blue', 'blue')], default='blue', max_length=16)),
                ('number_of_sites', models.IntegerField(blank=True, default=1, null=True)),
                ('number_of_casualties', models.CharField(blank=True, default='0', max_length=128, null=True)),
                ('number_of_memorials', models.IntegerField(blank=True, null=True)),
                ('type_of_place_before_event', models.CharField(blank=True, default='0', max_length=128, null=True)),
                ('occupation_period', models.CharField(blank=True, max_length=256, null=True)),
                ('parent_map', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='maps.map')),
            ],
        ),
        migrations.CreateModel(
            name='AlternativeRegionNames',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='maps.event')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlternativeCountryNames',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='maps.event')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlternativeCityNames',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='maps.event')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
